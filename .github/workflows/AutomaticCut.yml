# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check out repository code
        uses: actions/checkout@v2
        with: 
          ref: master ## Need to change this to your base branch
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - run: echo "The ${{ github.repository }} / ${{github.ref}} repository has been cloned to the runner."
      
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
        
      - run: echo "The branch ${{steps.extract_branch.outputs.branch}}"
      
      - name: Merge master to staging
        uses: everlytic/branch-merge@1.1.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          source_ref: ${{ github.ref }} ## Current Checked out Branch Master
          target_branch: 'staging' ## Branch we wish to merge into staging
          commit_message_template: '[Automated] Merged {source_ref} into target {target_branch}' 
      - name: Merge has Failed
        if: ${{ failure() }}
        run: echo "Send message to Slack about merge failure - needs manual intervention"
        
      - name: Checkout staging
        uses: actions/checkout@v2
        with: 
          ref: staging ## Need to change this to your base branch
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - run: git cherry -v origin/release
        
      - name: Check staging -> release difference
        shell: bash
        run: |
          diffresult=$(git cherry -v origin/release)
          diffresult="${diffresult//'%'/'%25'}"
          diffresult="${diffresult//$'\n'/'%0A'}"
          diffresult="${diffresult//$'\r'/'%0D'}"
          echo "pr=$diffresults" >> $GITHUB_ENV
        id: extract_diff
        
      - name: Echo Diffs
        run: echo "${{env.pr}} result ${{steps.extract_diff.outputs.result}}"
        
      #- name: Create Pull Request
      #  uses: peter-evans/create-pull-request@v3
      #  with:
      #      token: ${{ secrets.GITHUB_TOKEN }}
      #      commit-message: Auto-generated per github action
      #      title: "Automatic Cut and Pull Request ${{CURRENT_DATE YYYY.MMM.DD}}"
      #      body: |
      #        This PR is auto-generated by 
      #        [create-pull-request](https://github.com/peter-evans/create-pull-request).
      #        ${{CURENT_DATE YYYY.MMM.DD}}
      #        
      #        ${{steps.extract_diff.outputs.result}}
      #        
      #      branch: automatic-cut
      #      labels: automated pr
            
      #- name: Failed to create Pull Request
      #  if: ${{ failure() }}
      #  run: echo "Send message to Slack about Pull Request"
      #- name: Failed to create Pull Request
      #  if: ${{ success() }}
      #  run: echo "Send message to Slack about Pull Request"
        
      #- name: Generate Jira Ticket for Pull Request to release
      #  run: echo "Generating JIRA ticket for PR"
